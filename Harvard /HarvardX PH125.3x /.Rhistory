library(gtools)
medals <- permutations(8,3)
nrow(medals)
jamaica < permutations(3,3)
nrow(jamaica)/nrow(medals)
nrow(jamaica)/nrow(medals)
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
jamaica < permutations(3,3)
nrow(jamaica)/nrow(medals)
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
set.seed(1)
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
B <- 10000
all_jamaica <- replicate(B, {
results <- sample(runners, 3)
all(results == "Jamaica")
})
mean(all_jamaica)
6 * nrow(combinations(6,2)) * 2
6 * nrow(combinations(6,2)) * 3
6 * nrow(combinations(6,3)) * 3
library(tidyverse)
entree_choices <- function(x){
x * nrow(combinations(6,2)) * 3
}
combos <- sapply(1:12, entree_choices)
data.frame(entrees = 1:12, combos = combos) %>%
filter(combos > 365) %>%
min(.$entrees)
side_choices <- function(x){
6 * nrow(combinations(x, 2)) * 3
}
combos <- sapply(2:12, side_choices)
data.frame(sides = 2:12, combos = combos) %>%
filter(combos > 365) %>%
min(.$sides)
nrow(esoph)
all_cases <- sum(esoph$ncases)
all_cases
# function to calculate probability of shared bdays across n people
compute_prob <- function(n, B = 10000) {
same_day <- replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_day)
}
n <- seq(1, 60)
x <- 1:10
sqrt(x)    # sqrt operates on each element of the vector
y <- 1:10
x*y    # * operates element-wise on both vectors
compute_prob(n)    # does not iterate over the vector n without sapply
x <- 1:10
sapply(x, sqrt)    # this is equivalent to sqrt(x)
prob <- sapply(n, compute_prob)    # element-wise application of compute_prob to n
plot(n, prob)
all_controls <- sum(esoph$ncontrols)
all_controls
esoph %>%
filter(alcgp == "120+") %>%
summarize(ncases = sum(ncases), ncontrols = sum(ncontrols)) %>%
mutate(p_case = ncases / (ncases + ncontrols)) %>%
pull(p_case)
esoph %>%
filter(alcgp == "0-39g/day") %>%
summarize(ncases = sum(ncases), ncontrols = sum(ncontrols)) %>%
mutate(p_case = ncases / (ncases + ncontrols)) %>%
pull(p_case)
tob_cases <- esoph %>%
filter(tobgp != "0-9g/day") %>%
pull(ncases) %>%
sum()
tob_cases/all_cases
tob_controls <- esoph %>%
filter(tobgp != "0-9g/day") %>%
pull(ncontrols) %>%
sum()
tob_controls/all_controls
p <- 5/38
a <- 6
b <- -1
mu <- a*p + b*(1-p)
mu
B <- 10^seq(1, 5, len = 100)    # defines vector of many B values
compute_prob <- function(B, n = 22){    # function to run Monte Carlo simulation with each B
same_day <- replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_day)
}
prob <- sapply(B, compute_prob)    # apply compute_prob to many values of B
plot(log10(B), prob, type = "l")    # plot a line graph of estimates
high_alc_cases <- esoph %>%
filter(alcgp == "120+") %>%
pull(ncases) %>%
sum()
p_case_high_alc <- high_alc_cases/all_cases
p_case_high_alc
high_tob_cases <- esoph %>%
filter(tobgp == "30+") %>%
pull(ncases) %>%
sum()
p_case_high_tob <- high_tob_cases/all_cases
p_case_high_tob
high_alc_tob_cases <- esoph %>%
filter(alcgp == "120+" & tobgp == "30+") %>%
pull(ncases) %>%
sum()
p_case_high_alc_tob <- high_alc_tob_cases/all_cases
p_case_high_alc_tob
high_alc_controls <- esoph %>%
filter(alcgp == "120+") %>%
pull(ncontrols) %>%
sum()
p_control_high_alc <- high_alc_controls/all_controls
p_control_high_alc
p_case_high_alc/p_control_high_alc
high_tob_controls <- esoph %>%
filter(tobgp == "30+") %>%
pull(ncontrols) %>%
sum()
p_control_high_tob <- high_tob_controls/all_controls
p_control_high_tob
igh_alc_tob_controls <- esoph %>%
filter(alcgp == "120+" & tobgp == "30+") %>%
pull(ncontrols) %>%
sum()
p_control_high_alc_tob <- high_alc_tob_controls/all_controls
p_control_either_highest <- p_control_high_alc + p_control_high_tob - p_control_high_alc_tob
p_control_either_highest <- p_control_high_alc + p_control_high_tob - p_control_high_alc_tob
p_case_either_highest/p_control_either_highest
n <- 6
outcomes <- c(0,1)
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen first
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)    # open door with no prize that isn't chosen
switch <- doors[!doors%in%c(my_pick, show)]    # switch to the door that wasn't chosen first or opened
switch == prize_door    # test whether the switched door has the prize
})
B <- 10000
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)    # open door with no prize that isn't chosen
stick <- my_pick    # stick with original door
stick == prize_door    # test whether the original door has the prize
})
mean(stick)    # probability of choosing prize door when sticking
B <- 10^seq(1, 5, len = 100)    # defines vector of many B values
compute_prob <- function(B, n = 22){    # function to run Monte Carlo simulation with each B
same_day <- replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_day)
}
prob <- sapply(B, compute_prob)    # apply compute_prob to many values of B
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Print the variable `p_green` to the console
p_green
# Use the `set.seed` function to make sure your answer matches the expected result after random sampling.
set.seed(1)
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
# Create a model to predict the random variable `X`, your winnings from betting on green. Sample one time.
X <- sample(c(17,-1), 1, prob = c(p_green, p_not_green))
# Print the value of `X` to the console
X
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
# Calculate the expected outcome if you win $17 if the ball lands on green and you lose $1 if the ball doesn't land on green
17*p_green + -1*p_not_green
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
# Compute the standard error of the random variable
abs((17 - -1))*sqrt(p_green*p_not_green)
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
# Use the `set.seed` function to make sure your answer matches the expected result after random sampling
set.seed(1)
# Define the number of bets using the variable 'n'
n <- 1000
# Create a vector called 'X' that contains the outcomes of 1000 samples
X <- sample(c(17,-1), size = n, replace = TRUE, prob = c(p_green, p_not_green))
# Assign the sum of all 1000 outcomes to the variable 'S'
S <- sum(X)
# Print the value of 'S' to the console
S
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
# Define the number of bets using the variable 'n'
n <- 1000
# Calculate the expected outcome of 1,000 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green
n * (17*p_green + -1*p_not_green)
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
# Define the number of bets using the variable 'n'
n <- 1000
# Compute the standard error of the sum of 1,000 outcomes
sqrt(n) * abs((17 - -1))*sqrt(p_green*p_not_green)
n <- 1000
loss_per_foreclosure <- -200000
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
B <- 10000
losses <- replicate(B, {
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
library(tidyverse)
data.frame(losses_in_millions = losses/10^6) %>%
ggplot(aes(losses_in_millions)) +
geom_histogram(binwidth = 0.6, col = "black")
n*(p*loss_per_foreclosure + (1-p)*0)    # expected value
sqrt(n)*abs(loss_per_foreclosure)*sqrt(p*(1-p))    # standard error
x = - loss_per_foreclosure*p/(1-p)
x
x/180000
l <- loss_per_foreclosure
z <- qnorm(0.01)
x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))\x
B <- 100000
profit <- replicate(B, {
draws <- sample( c(x, loss_per_foreclosure), n,
prob=c(1-p, p), replace = TRUE)
sum(draws)
})
mean(profit)    # expected value of the profit over n loans
mean(profit<0)    # probability of losing money
p <- .04
loss_per_foreclosure <- -200000
r <- 0.05
x <- r*180000
loss_per_foreclosure*p + x*(1-p)
z <- qnorm(0.01)
l <- loss_per_foreclosure
n <- ceiling((z^2*(x-l)^2*p*(1-p))/(l*p + x*(1-p))^2)
n    # number of loans required
n*(loss_per_foreclosure*p + x * (1-p))    # expected profit over n loans
B <- 10000
p <- 0.04
x <- 0.05 * 180000
profit <- replicate(B, {
draws <- sample( c(x, loss_per_foreclosure), n,
prob=c(1-p, p), replace = TRUE)
sum(draws)
})
mean(profit)
p <- 0.04
x <- 0.05*180000
profit <- replicate(B, {
new_p <- 0.04 + sample(seq(-0.01, 0.01, length = 100), 1)
draws <- sample( c(x, loss_per_foreclosure), n,
prob=c(1-new_p, new_p), replace = TRUE)
sum(draws)
})
mean(profit)    # expected profit
mean(profit < 0)    # probability of losing money
mean(profit < -10000000)    # probability of losing over $10 million
# Assign the number of loans to the variable `n`
n <- 10000
# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000
# Assign the probability of default to the variable `p_default`
p_default <- 0.03
# Use the `set.seed` function to make sure your answer matches the expected result after random sampling
set.seed(1)
# The variable `B` specifies the number of times we want the simulation to run
B <- 10000
# Generate a list of summed losses 'S'. Replicate the code from the previous exercise over 'B' iterations to generate a list of summed losses for 'n' loans. Ignore any warnings for now.
S <- replicate(B, {
defaults <- sample( c(0,1), n, prob=c(1-p_default, p_default), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
# Plot a histogram of 'S'. Ignore any warnings for now.
hist(S)
# Assign the number of loans to the variable `n`
n <- 10000
# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000
# Assign the probability of default to the variable `p_default`
p_default <- 0.03
# Calculate the expected loss due to default out of 10,000 loans
n*(p_default*loss_per_foreclosure + (1-p_default)*0)
# Assign the number of loans to the variable `n`
n <- 10000
# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000
# Assign the probability of default to the variable `p_default`
p_default <- 0.03
# Compute the standard error of the sum of 10,000 loans
sqrt(n) * abs(loss_per_foreclosure) * sqrt(p_default*(1 - p_default))
# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000
# Assign the probability of default to the variable `p_default`
p_default <- 0.03
# Assign a variable `x` as the total amount necessary to have an expected outcome of $0
x <- -(loss_per_foreclosure*p_default) / (1 - p_default)
# Convert `x` to an interest rate, given that the loan amount is $180,000. Print this value to the console.
x / 180000
# Assign the number of loans to the variable `n`
n <- 10000
# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000
# Assign the probability of default to the variable `p_default`
p_default <- 0.03
# Generate a variable `z` using the `qnorm` function
z <- qnorm(0.05)
# Generate a variable `x` using `z`, `p_default`, `loss_per_foreclosure`, and `n`
x <- -loss_per_foreclosure*( n*p_default - z*sqrt(n*p_default*(1 - p_default)))/ ( n*(1 - p_default) + z*sqrt(n*p_default*(1 - p_default)))
# Convert `x` to an interest rate, given that the loan amount is $180,000. Print this value to the console.
x / 180000
library(tidyverse)
library(dslabs)
data(death_prob)
head(death_prob)
p <- death_prob %>%
filter(sex == "Female" & age == "50") %>%
pull(prob)
p
a <- -150000
b <- 1150
mu <- a*p + b*(1-p)
mu
sigma <- abs(b-a) * sqrt(p*(1-p))
sigma
n <- 1000
n*mu
sqrt(n) * sigma
pnorm(0, n*mu, sqrt(n)*sigma)
p_male <- death_prob %>%
filter(sex == "Male" & age == "50") %>%
pull(prob)
p_male
p <- p_male
mu_sum <- 700000
n <- 1000
a <- -150000
b <- (mu_sum/n-a*p)/(1-p)
b
sigma_sum <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
sigma_sum
pnorm(0, mu_sum, sigma_sum)
p <- .015    # probability of claim
a <- -150000    # loss per claim
b <- 1150    # premium - profit when no claim
n <- 1000
exp_val <- n*(a*p + b*(1-p))
exp_val
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
se
pnorm(0, exp_val, se)
pnorm(-1*10^6, exp_val, se)
p <- seq(.01, .03, .001)
a <- -150000    # loss per claim
b <- 1150    # premium - profit when no claim
n <- 1000
p_lose_money <- sapply(p, function(p){
exp_val <- n*(a*p + b*(1-p))
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
pnorm(0, exp_val, se)
})
data.frame(p, p_lose_money) %>%
filter(p_lose_money > 0.9) %>%
pull(p) %>%
min()
p_lose_million <- sapply(p, function(p){
exp_val <- n*(a*p + b*(1-p))
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
pnorm(-1*10^6, exp_val, se)
})
data.frame(p, p_lose_million) %>%
filter(p_lose_million > 0.9) %>%
pull(p) %>%
min()
set.seed(25)
p <- .015
loss <- -150000
profit <- 1150
n <- 1000
outcomes <- sample(c(loss, profit), n, prob = c(p, 1-p), replace = TRUE)
sum(outcomes)/10^6
set.seed(27)
B <- 10000
profits <- replicate(B, {
outcomes <- sample(c(loss, profit), n, prob = c(p, 1-p), replace = TRUE)
sum(outcomes)/10^6
})
mean(profits < -1)
p <- .015
n <- 1000
l <- -150000
z <- qnorm(.05)
x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))
x
l*p + x*(1-p)
mu <- n*(l*p + x*(1-p))
mu
set.seed(28)
B <- 10000
profit <- replicate(B, {
draws <- sample(c(x, l), n,
prob=c(1-p, p), replace = TRUE)
sum(draws)
})
mean(profit < 0)
# n, p, l and x as defined in the problem information
set.seed(29)    # in R 3.6, set.seed(29, sample.kind="Rounding")
profit <- replicate(B, {
new_p <- p + sample(seq(-0.01, 0.01, length = 100), 1)
draws <- sample(c(x, l), n,
prob=c(1-new_p, new_p), replace = TRUE)
sum(draws)
})
mean(profit)
mean(profit < 0)
mean(profit < -1*10^6)
p <- 1/5 # one correct choice of 5 options
p
a <- 1
b <- -0.25
mu <- a*p + b*(1-p)
mu
n <- 44
n*mu
sigma <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
sigma
1-pnorm(8, mu, sigma)
set.seed(21, sample.kind = "Rounding")
B <- 10000
n <- 44
p <- 0.2
tests <- replicate(B, {
X <- sample(c(1, -0.25), n, replace = TRUE, prob = c(p, 1-p))
sum(X)
})
mean(tests >= 8)
p <- 1/4
a <- 1
b <- 0
n <- 44
mu <- n * a*p + b*(1-p)
mu
p <- seq(0.25, 0.95, 0.05)
exp_val <- sapply(p, function(x){
mu <- n * a*x + b*(1-x)
sigma <- sqrt(n) * abs(b-a) * sqrt(x*(1-x))
1-pnorm(35, mu, sigma)
})
min(p[which(exp_val > 0.8)])
p <- 5/38
a <- 6
b <- -1
mu <- a*p + b*(1-p)
mu
igma <- abs(b-a) * sqrt(p*(1-p))
sigma
mu
n <- 500
sigma/sqrt(n)
n*mu
sqrt(n) * sigma
pnorm(0, n*mu, sqrt(n)*sigma)
